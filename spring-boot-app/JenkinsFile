pipeline {
  agent none
  
  stages {
  
    stage('Checkout') {
      
      agent any
      
      steps {
        
        sh 'echo passed'
        //git branch: 'main', url: ''
      }
    }

    stage('SAST with Semgrep') {
      
      agent any
      
      steps {
        
        sh '''docker pull semgrep/semgrep && docker run --rm -v "${PWD}/spring-boot-app:/src" semgrep/semgrep semgrep scan --config=auto --text --text-output="SAST_reports/semgrep.txt"'''
        
        input 'Do you accept SAST results?'
        echo 'Proceed further...'
      }
    }

    stage('SCA with OWASP Dependency Check') {
      
      agent {
        docker {
        image 'abhishekf5/maven-abhishek-docker-agent:v1'
        args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
      }
      
      steps {
        
         sh '''cd spring-boot-app && mvn org.owasp:dependency-check-maven:check -Dodc.outputDirectory="SCA_reports" -DnvdApiKey="a25e547d-80fc-4b51-b80a-fb02479d502b"'''
        
        input 'Do you accept SCA results?'
        echo 'Proceed further...'
      }
    }

    stage('Build Application') {
      agent {
        docker {
        image 'abhishekf5/maven-abhishek-docker-agent:v1'
        args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
      }
      
      steps {
        
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "imaged3-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "spring-boot-app/Dockerfile"
        // REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      
      agent any
      
      steps {
        
        script {
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry("http://localhost:5000") {
                dockerImage.push()
            }
        }
      }
    }
  }
}